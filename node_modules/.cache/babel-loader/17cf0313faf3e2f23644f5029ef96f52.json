{"ast":null,"code":"import i18n from\"i18next\";import Backend from\"i18next-xhr-backend\";import LanguageDetector from\"i18next-browser-languagedetector\";import{initReactI18next}from\"react-i18next\";var fallbackLng=[\"eng\"];var availableLanguages=[\"th\",\"eng\"];var options={order:[\"navigator\",\"htmlTag\",\"path\",\"subdomain\"],lookupQuerystring:\"lng\",lookupCookie:\"i18next\",lookupLocalStorage:\"i18nextLng\",lookupFromPathIndex:0,lookupFromSubdomainIndex:0,// cache user language on\ncaches:[\"localStorage\",\"cookie\"],excludeCacheFor:[\"cimode\"],// languages to not persist (cookie, localStorage)\n// optional expire and domain for set cookie\ncookieMinutes:10,cookieDomain:\"myDomain\",// optional htmlTag with lang attribute, the default is:\nhtmlTag:document.documentElement,// only detect languages that are in the whitelist\ncheckWhitelist:true};i18n.use(Backend)// load translation using xhr -> see /public/locales. We will add locales in the next step\n.use(LanguageDetector)// detect user language\n.use(initReactI18next)// pass the i18n instance to react-i18next.\n.init({fallbackLng:fallbackLng,// if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\ndebug:true,whitelist:availableLanguages,detection:options,interpolation:{escapeValue:false}});export default i18n;","map":{"version":3,"sources":["D:/wed-2564/react-website-v1-1/src/i18n.js"],"names":["i18n","Backend","LanguageDetector","initReactI18next","fallbackLng","availableLanguages","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","use","init","debug","whitelist","detection","interpolation","escapeValue"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,SAAjB,CACA,MAAOC,CAAAA,OAAP,KAAoB,qBAApB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,kCAA7B,CACA,OAASC,gBAAT,KAAiC,eAAjC,CAEA,GAAMC,CAAAA,WAAW,CAAG,CAAC,KAAD,CAApB,CACA,GAAMC,CAAAA,kBAAkB,CAAG,CAAC,IAAD,CAAO,KAAP,CAA3B,CAEA,GAAMC,CAAAA,OAAO,CAAG,CACdC,KAAK,CAAE,CAAC,WAAD,CAAc,SAAd,CAAyB,MAAzB,CAAiC,WAAjC,CADO,CAGdC,iBAAiB,CAAE,KAHL,CAIdC,YAAY,CAAE,SAJA,CAKdC,kBAAkB,CAAE,YALN,CAMdC,mBAAmB,CAAE,CANP,CAOdC,wBAAwB,CAAE,CAPZ,CASd;AACAC,MAAM,CAAE,CAAC,cAAD,CAAiB,QAAjB,CAVM,CAWdC,eAAe,CAAE,CAAC,QAAD,CAXH,CAWe;AAE7B;AACAC,aAAa,CAAE,EAdD,CAedC,YAAY,CAAE,UAfA,CAiBd;AACAC,OAAO,CAAEC,QAAQ,CAACC,eAlBJ,CAoBd;AACAC,cAAc,CAAE,IArBF,CAAhB,CAwBApB,IAAI,CACDqB,GADH,CACOpB,OADP,CACgB;AADhB,CAGGoB,GAHH,CAGOnB,gBAHP,CAGyB;AAHzB,CAKGmB,GALH,CAKOlB,gBALP,CAKyB;AALzB,CAOGmB,IAPH,CAOQ,CACJlB,WAAW,CAAXA,WADI,CACS;AACbmB,KAAK,CAAE,IAFH,CAGJC,SAAS,CAAEnB,kBAHP,CAIJoB,SAAS,CAAEnB,OAJP,CAMJoB,aAAa,CAAE,CACbC,WAAW,CAAE,KADA,CANX,CAPR,EAkBA,cAAe3B,CAAAA,IAAf","sourcesContent":["import i18n from \"i18next\";\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nconst fallbackLng = [\"eng\"];\r\nconst availableLanguages = [\"th\", \"eng\"];\r\n\r\nconst options = {\r\n  order: [\"navigator\", \"htmlTag\", \"path\", \"subdomain\"],\r\n\r\n  lookupQuerystring: \"lng\",\r\n  lookupCookie: \"i18next\",\r\n  lookupLocalStorage: \"i18nextLng\",\r\n  lookupFromPathIndex: 0,\r\n  lookupFromSubdomainIndex: 0,\r\n\r\n  // cache user language on\r\n  caches: [\"localStorage\", \"cookie\"],\r\n  excludeCacheFor: [\"cimode\"], // languages to not persist (cookie, localStorage)\r\n\r\n  // optional expire and domain for set cookie\r\n  cookieMinutes: 10,\r\n  cookieDomain: \"myDomain\",\r\n\r\n  // optional htmlTag with lang attribute, the default is:\r\n  htmlTag: document.documentElement,\r\n\r\n  // only detect languages that are in the whitelist\r\n  checkWhitelist: true,\r\n};\r\n\r\ni18n\r\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\r\n\r\n  .use(LanguageDetector) // detect user language\r\n\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n\r\n  .init({\r\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\r\n    debug: true,\r\n    whitelist: availableLanguages,\r\n    detection: options,\r\n\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n"]},"metadata":{},"sourceType":"module"}