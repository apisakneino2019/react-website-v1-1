{"ast":null,"code":"import i18n from \"i18next\";\nimport Backend from \"i18next-xhr-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nconst fallbackLng = [\"th\"];\nconst availableLanguages = [\"en\", \"th\"];\nconst options = {\n  order: [\"navigator\", \"htmlTag\", \"path\", \"subdomain\"],\n  lookupQuerystring: \"lng\",\n  lookupCookie: \"i18next\",\n  lookupLocalStorage: \"i18nextLng\",\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n  // cache user language on\n  caches: [\"localStorage\", \"cookie\"],\n  excludeCacheFor: [\"cimode\"],\n  // languages to not persist (cookie, localStorage)\n  // optional expire and domain for set cookie\n  cookieMinutes: 10,\n  cookieDomain: \"myDomain\",\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement,\n  // only detect languages that are in the whitelist\n  checkWhitelist: true\n};\ni18n.use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\n.use(LanguageDetector) // detect user language\n.use(initReactI18next) // pass the i18n instance to react-i18next.\n.init({\n  fallbackLng,\n  // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\n  debug: true,\n  whitelist: availableLanguages,\n  detection: options,\n  interpolation: {\n    escapeValue: false\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["D:/wed-2564/react-website-v1-1/src/i18n.js"],"names":["i18n","Backend","LanguageDetector","initReactI18next","fallbackLng","availableLanguages","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","use","init","debug","whitelist","detection","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,MAAMC,WAAW,GAAG,CAAC,IAAD,CAApB;AACA,MAAMC,kBAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,CAA3B;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,CAAC,WAAD,EAAc,SAAd,EAAyB,MAAzB,EAAiC,WAAjC,CADO;AAGdC,EAAAA,iBAAiB,EAAE,KAHL;AAIdC,EAAAA,YAAY,EAAE,SAJA;AAKdC,EAAAA,kBAAkB,EAAE,YALN;AAMdC,EAAAA,mBAAmB,EAAE,CANP;AAOdC,EAAAA,wBAAwB,EAAE,CAPZ;AASd;AACAC,EAAAA,MAAM,EAAE,CAAC,cAAD,EAAiB,QAAjB,CAVM;AAWdC,EAAAA,eAAe,EAAE,CAAC,QAAD,CAXH;AAWe;AAE7B;AACAC,EAAAA,aAAa,EAAE,EAdD;AAedC,EAAAA,YAAY,EAAE,UAfA;AAiBd;AACAC,EAAAA,OAAO,EAAEC,QAAQ,CAACC,eAlBJ;AAoBd;AACAC,EAAAA,cAAc,EAAE;AArBF,CAAhB;AAwBApB,IAAI,CACDqB,GADH,CACOpB,OADP,EACgB;AADhB,CAGGoB,GAHH,CAGOnB,gBAHP,EAGyB;AAHzB,CAKGmB,GALH,CAKOlB,gBALP,EAKyB;AALzB,CAOGmB,IAPH,CAOQ;AACJlB,EAAAA,WADI;AACS;AACbmB,EAAAA,KAAK,EAAE,IAFH;AAGJC,EAAAA,SAAS,EAAEnB,kBAHP;AAIJoB,EAAAA,SAAS,EAAEnB,OAJP;AAMJoB,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE;AADA;AANX,CAPR;AAkBA,eAAe3B,IAAf","sourcesContent":["import i18n from \"i18next\";\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nconst fallbackLng = [\"th\"];\r\nconst availableLanguages = [\"en\", \"th\"];\r\n\r\nconst options = {\r\n  order: [\"navigator\", \"htmlTag\", \"path\", \"subdomain\"],\r\n\r\n  lookupQuerystring: \"lng\",\r\n  lookupCookie: \"i18next\",\r\n  lookupLocalStorage: \"i18nextLng\",\r\n  lookupFromPathIndex: 0,\r\n  lookupFromSubdomainIndex: 0,\r\n\r\n  // cache user language on\r\n  caches: [\"localStorage\", \"cookie\"],\r\n  excludeCacheFor: [\"cimode\"], // languages to not persist (cookie, localStorage)\r\n\r\n  // optional expire and domain for set cookie\r\n  cookieMinutes: 10,\r\n  cookieDomain: \"myDomain\",\r\n\r\n  // optional htmlTag with lang attribute, the default is:\r\n  htmlTag: document.documentElement,\r\n\r\n  // only detect languages that are in the whitelist\r\n  checkWhitelist: true,\r\n};\r\n\r\ni18n\r\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\r\n\r\n  .use(LanguageDetector) // detect user language\r\n\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n\r\n  .init({\r\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\r\n    debug: true,\r\n    whitelist: availableLanguages,\r\n    detection: options,\r\n\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n"]},"metadata":{},"sourceType":"module"}